import { addHours, format } from 'date-fns'
import Nano from 'nano-jsx'
import { UserStats } from './statink'

const round = (n: number, r: number) =>
  Math.round(n * Math.pow(10, r)) / Math.pow(10, r)

export type WidgetProps = Readonly<{
  screenName: string
  stats: UserStats
}>

export const Widget = ({ screenName, stats }: WidgetProps) => (
  <svg
    baseProfile="full"
    height="540"
    version="1.1"
    width="300"
    xmlns="http://www.w3.org/2000/svg"
  >
    <defs>
      <style>
        {`<![CDATA[
        text, tspan {
          font-family: sans-serif;
        }
        .label {
          fill: gray;
          font-size: 16px;
        }
        .value {
          font-size: 24px;
        }
        .footer {
          fill: gray;
          font-size: 12px;
        }
        ]]>`}
      </style>
    </defs>
    <rect rx="5" ry="5" y="20" width="300" height="500" fill="gray" />
    <rect rx="5" ry="5" x="1" y="21" width="298" height="498" fill="white" />
    <rect rx="2" ry="2" x="10" y="5" width="64" height="64" fill="gray" />
    <text font-size="38" text-anchor="middle" x="42" y="52">
      🦑
    </text>
    <a href={`https://stat.ink/@${screenName}`}>
      <text fill="blue" font-size="24" font-weight="bold" x="90" y="60">
        {screenName}
      </text>
    </a>
    <text x="20" y="100">
      <tspan class="label">Battles</tspan>
      <tspan class="value" dx="-54" dy="30">
        {stats.entire.battles}
      </tspan>
    </text>
    <text x="100" y="100">
      <tspan class="label">Win %</tspan>
      <tspan class="value" dx="-54" dy="30">
        {round(stats.entire.win_pct, 1)}%
      </tspan>
    </text>
    <text x="20" y="160">
      <tspan class="label">Avg Kills</tspan>
      <tspan class="value" dx="-66" dy="30">
        {round(stats.entire.kill_avg, 2)}
      </tspan>
    </text>
    <text x="100" y="160">
      <tspan class="label">Avg Deaths</tspan>
      <tspan class="value" dx="-90" dy="30">
        {round(stats.entire.death_avg, 2)}
      </tspan>
    </text>
    <text x="200" y="160">
      <tspan class="label">Kill Ratio</tspan>
      <tspan class="value" dx="-68" dy="30">
        {round(stats.entire.kill_ratio, 2)}
      </tspan>
    </text>
    <text x="20" y="220">
      <tspan class="label">Kills/min</tspan>
      <tspan class="value" dx="-70" dy="30">
        {round(stats.entire.kill_per_min, 3)}
      </tspan>
    </text>
    <text x="100" y="220">
      <tspan class="label">Deaths/min</tspan>
      <tspan class="value" dx="-92" dy="30">
        {round(stats.entire.death_per_min, 3)}
      </tspan>
    </text>
    <text x="200" y="220">
      <tspan class="label">Total Kills</tspan>
      <tspan class="value" dx="-74" dy="30">
        {stats.entire.kill_total}
      </tspan>
    </text>
    <line x1="20" y1="270" x2="280" y2="270" stroke="gray" />
    <text class="label" x="20" y="300">
      Ranked: Current
    </text>
    <text class="value" x="20" y="330">
      <tspan>⬜</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.area.rank_current}
      </tspan>
    </text>
    <text class="value" x="90" y="330">
      <tspan>🕋</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.yagura.rank_current}
      </tspan>
    </text>
    <text class="value" x="160" y="330">
      <tspan>🦈</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.hoko.rank_current}
      </tspan>
    </text>
    <text class="value" x="230" y="330">
      <tspan>🐚</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.asari.rank_current}
      </tspan>
    </text>
    <text class="label" x="20" y="390">
      Ranked: Peak
    </text>
    <text class="value" x="20" y="420">
      <tspan>⬜</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.area.rank_peak}
      </tspan>
    </text>
    <text class="value" x="90" y="420">
      <tspan>🕋</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.yagura.rank_peak}
      </tspan>
    </text>
    <text class="value" x="160" y="420">
      <tspan>🦈</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.hoko.rank_peak}
      </tspan>
    </text>
    <text class="value" x="230" y="420">
      <tspan>🐚</tspan>
      <tspan dx="-26" dy="30" text-anchor="middle">
        {stats.gachi.rules.asari.rank_peak}
      </tspan>
    </text>
    <text class="footer" x="20" y="490">
      <tspan>
        Updated at:{' '}
        {format(addHours(stats.updated_at.time, 9), 'yyyy/MM/dd HH:mm')}
      </tspan>
      <tspan x="160" dy="16">
        Generated by
      </tspan>
      <a href="https://github.com/rokoucha/inpri">
        <tspan fill="blue" font-weight="bold" dx="4">
          InPri
        </tspan>
      </a>
      <tspan>.</tspan>
    </text>
  </svg>
)

export const renderWidget = (props: WidgetProps): string =>
  Nano.renderSSR(<Widget {...props} />)
